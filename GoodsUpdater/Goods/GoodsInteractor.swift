//
//  GoodsInteractor.swift
//  GoodsUpdater
//
//  Created by Александр on 14.01.2020.
//  Copyright (c) 2020 Utkonos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol GoodsBusinessLogic {
    func fetchData(request: Goods.Fetching.Request)
    func actualize(request: Goods.UpdateItem.Request)
}

protocol GoodsDataStore: class {
//    var name: String { get set }
}

class GoodsInteractor: GoodsDataStore {
    var presenter: GoodsPresentationLogic?
    private let worker = GoodsWorker()
//    var name: String = ""
    
    private let sort: Goods.SortType
    init(sort: Goods.SortType) {
        self.sort = sort
    }
}

// MARK: - GoodsBusinessLogic
extension GoodsInteractor: GoodsBusinessLogic {

    func actualize(request: Goods.UpdateItem.Request) {
        let response = Goods.UpdateItem.Response(item: request.item, items: request.items)
        presenter?.presentActual(response: response)
    }
    
    func fetchData(request: Goods.Fetching.Request) {
        worker.fetchData { [weak self] result in
            guard let strongSelf = self else { return }
            switch result {
            case .success(let items):
                
                let sortedItems: [Item]
                switch strongSelf.sort {
                case .popular:
                    sortedItems = items.sorted(by: { $0.rating < $1.rating })
                case .new:
                    sortedItems = items.sorted(by: { $0.id < $1.id })
                }
                
                let response = Goods.Fetching.Response(items: sortedItems)
                strongSelf.presenter?.presentFetchingResult(response: response)
            case .failure(let error):
                strongSelf.showError(error)
            }
        }
    }
    
    // MARK: - Private
    
    private func showError(_ error: AppError) {
        print(error)
    }
}
